paths: {}
info:
  title: ARCOR2 ARServer Data Models
  version: 1.1.1
openapi: 3.0.2
components:
  schemas:
    Event:
      type: object
      required:
      - event
      properties:
        event:
          type: string
        change_type:
          type: string
          enum:
          - add
          - update
          - remove
          - update_base
          x-enum-name: EventType
          x-module-name: arcor2.data.events
        parent_id:
          type: string
      x-module-name: arcor2.data.events
      description: Event()
    PackageSummary:
      type: object
      required:
      - id
      - package_meta
      properties:
        id:
          type: string
        package_meta:
          $ref: '#/components/schemas/PackageMeta'
          description: Content of 'package.json'.
        project_meta:
          $ref: '#/components/schemas/ProjectMeta'
      x-module-name: arcor2_execution_data.common
      description: 'PackageSummary(id: ''str'', package_meta: ''PackageMeta'', project_meta:
        ''None | ProjectMeta'' = None)'
    PackageMeta:
      type: object
      required:
      - name
      - built
      properties:
        name:
          type: string
        built:
          type: string
          format: date-time
        executed:
          type: string
          format: date-time
      x-module-name: arcor2.data.execution
      description: 'PackageMeta(name: str, built: datetime.datetime, executed: Optional[datetime.datetime]
        = None)'
    ProjectMeta:
      type: object
      required:
      - id
      - name
      - description
      - modified
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        modified:
          type: string
          format: date-time
          description: Last modification.
      x-module-name: arcor2_execution_data.common
      description: Provides data about the project embedded in the execution package.
    PackageChanged:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/PackageSummary'
        x-module-name: arcor2_execution_data.events
      description: 'PackageChanged(data: arcor2_execution_data.common.PackageSummary)'
    ActionStateAfterData:
      type: object
      required:
      - action_id
      properties:
        action_id:
          type: string
        results:
          type: array
          items:
            type: string
      x-module-name: arcor2.data.events
      description: 'Data(action_id: str, results: Optional[list[str]] = None)'
    ActionStateAfter:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/ActionStateAfterData'
        x-module-name: arcor2.data.events
      description: 'ActionStateAfter(data: arcor2.data.events.ActionStateAfter.Data)'
    ActionStateBeforeData:
      type: object
      properties:
        action_id:
          type: string
        parameters:
          type: array
          items:
            type: string
        action_point_ids:
          type: array
          items:
            type: string
          uniqueItems: true
      x-module-name: arcor2.data.events
      description: 'Data(action_id: Optional[str] = None, parameters: Optional[list[str]]
        = None, action_point_ids: Optional[set[str]] = None)'
    ActionStateBefore:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/ActionStateBeforeData'
        x-module-name: arcor2.data.events
      description: 'ActionStateBefore(data: arcor2.data.events.ActionStateBefore.Data)'
    NotificationData:
      type: object
      required:
      - message
      - level
      properties:
        message:
          type: string
        level:
          type: string
          enum:
          - Info
          - Warn
          - Error
          x-enum-name: NotificationDataLevel
          x-module-name: arcor2.data.events
      x-module-name: arcor2.data.events
      description: 'Data(message: str, level: arcor2.data.events.Notification.Data.Level)'
    Notification:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/NotificationData'
        x-module-name: arcor2.data.events
      description: 'Notification(data: Optional[arcor2.data.events.Notification.Data]
        = None)'
    PackageInfoData:
      type: object
      required:
      - package_id
      - package_name
      - scene
      - project
      properties:
        package_id:
          type: string
        package_name:
          type: string
        scene:
          $ref: '#/components/schemas/Scene'
        project:
          $ref: '#/components/schemas/Project'
        collision_models:
          $ref: '#/components/schemas/CollisionModels'
          default:
            boxes: []
            spheres: []
            cylinders: []
            meshes: []
      x-module-name: arcor2.data.events
      description: 'Data(package_id: str, package_name: str, scene: arcor2.data.common.Scene,
        project: arcor2.data.common.Project, collision_models: arcor2.data.object_type.CollisionModels
        = <factory>)'
    Scene:
      allOf:
      - $ref: '#/components/schemas/BareScene'
      - type: object
        properties:
          objects:
            type: array
            items:
              $ref: '#/components/schemas/SceneObject'
            default: []
        x-module-name: arcor2.data.common
      description: 'Scene(name: ''str'', description: ''str'' = <factory>, created:
        ''Optional[datetime]'' = None, modified: ''Optional[datetime]'' = None, int_modified:
        ''Optional[datetime]'' = None, id: ''str'' = '''', objects: ''list[SceneObject]''
        = <factory>)'
    SceneObject:
      type: object
      required:
      - name
      - type
      properties:
        name:
          type: string
        type:
          type: string
        pose:
          $ref: '#/components/schemas/Pose'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
          default: []
        id:
          type: string
          default: ''
      x-module-name: arcor2.data.common
      description: 'SceneObject(name: ''str'', type: ''str'', pose: ''Optional[Pose]''
        = None, parameters: ''list[Parameter]'' = <factory>, id: ''str'' = '''')'
    Pose:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/Position'
          default:
            x: 0.0
            y: 0.0
            z: 0.0
        orientation:
          $ref: '#/components/schemas/Orientation'
          default:
            x: 0.0
            y: 0.0
            z: 0.0
            w: 1.0
      x-module-name: arcor2.data.common
      description: 'Pose(position: ''Position'' = <factory>, orientation: ''Orientation''
        = <factory>)'
    Position:
      allOf:
      - $ref: '#/components/schemas/IterableIndexable'
      - type: object
        properties:
          x:
            type: number
            default: 0.0
          y:
            type: number
            default: 0.0
          z:
            type: number
            default: 0.0
        x-module-name: arcor2.data.common
      description: 'Position(x: ''float'' = 0.0, y: ''float'' = 0.0, z: ''float''
        = 0.0)'
    IterableIndexable:
      type: object
      properties: {}
      x-module-name: arcor2.data.common
      description: IterableIndexable()
    Orientation:
      allOf:
      - $ref: '#/components/schemas/IterableIndexable'
      - type: object
        properties:
          x:
            type: number
            default: 0.0
          y:
            type: number
            default: 0.0
          z:
            type: number
            default: 0.0
          w:
            type: number
            default: 1.0
        x-module-name: arcor2.data.common
      description: 'Orientation(x: ''float'' = 0.0, y: ''float'' = 0.0, z: ''float''
        = 0.0, w: ''float'' = 1.0)'
    Parameter:
      type: object
      required:
      - name
      - type
      - value
      properties:
        name:
          type: string
        type:
          type: string
        value:
          type: string
      x-module-name: arcor2.data.common
      description: 'Parameter(name: ''str'', type: ''str'', value: ''str'')'
    BareScene:
      type: object
      required:
      - name
      properties:
        name:
          type: string
        description:
          type: string
          default: ''
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
        int_modified:
          type: string
          format: date-time
        id:
          type: string
          default: ''
      x-module-name: arcor2.data.common
      description: 'BareScene(name: ''str'', description: ''str'' = <factory>, created:
        ''Optional[datetime]'' = None, modified: ''Optional[datetime]'' = None, int_modified:
        ''Optional[datetime]'' = None, id: ''str'' = '''')'
    Project:
      allOf:
      - $ref: '#/components/schemas/BareProject'
      - type: object
        properties:
          action_points:
            type: array
            items:
              $ref: '#/components/schemas/ActionPoint'
            default: []
          parameters:
            type: array
            items:
              $ref: '#/components/schemas/ProjectParameter'
            default: []
          functions:
            type: array
            items:
              $ref: '#/components/schemas/ProjectFunction'
            default: []
          logic:
            type: array
            items:
              $ref: '#/components/schemas/LogicItem'
            default: []
          object_overrides:
            type: array
            items:
              $ref: '#/components/schemas/SceneObjectOverride'
            default: []
          project_objects_ids:
            type: array
            items:
              type: string
        x-module-name: arcor2.data.common
      description: 'Project(name: ''str'', scene_id: ''str'', description: ''str''
        = <factory>, has_logic: ''bool'' = True, created: ''Optional[datetime]'' =
        None, modified: ''Optional[datetime]'' = None, int_modified: ''Optional[datetime]''
        = None, id: ''str'' = '''', action_points: ''list[ActionPoint]'' = <factory>,
        parameters: ''list[ProjectParameter]'' = <factory>, functions: ''list[ProjectFunction]''
        = <factory>, logic: ''list[LogicItem]'' = <factory>, object_overrides: ''list[SceneObjectOverride]''
        = <factory>, project_objects_ids: ''Optional[list[str]]'' = None)'
    ActionPoint:
      allOf:
      - $ref: '#/components/schemas/BareActionPoint'
      - type: object
        properties:
          orientations:
            type: array
            items:
              $ref: '#/components/schemas/NamedOrientation'
            default: []
          robot_joints:
            type: array
            items:
              $ref: '#/components/schemas/ProjectRobotJoints'
            default: []
          actions:
            type: array
            items:
              $ref: '#/components/schemas/Action'
            default: []
        x-module-name: arcor2.data.common
      description: 'ActionPoint(name: ''str'', position: ''Position'', parent: ''Optional[str]''
        = None, display_name: ''Optional[str]'' = None, description: ''Optional[str]''
        = None, id: ''str'' = '''', orientations: ''list[NamedOrientation]'' = <factory>,
        robot_joints: ''list[ProjectRobotJoints]'' = <factory>, actions: ''list[Action]''
        = <factory>)'
    NamedOrientation:
      type: object
      required:
      - name
      - orientation
      properties:
        name:
          type: string
        orientation:
          $ref: '#/components/schemas/Orientation'
        id:
          type: string
          default: ''
      x-module-name: arcor2.data.common
      description: 'NamedOrientation(name: ''str'', orientation: ''Orientation'',
        id: ''str'' = '''')'
    ProjectRobotJoints:
      type: object
      required:
      - name
      - robot_id
      - joints
      properties:
        name:
          type: string
        robot_id:
          type: string
        joints:
          type: array
          items:
            $ref: '#/components/schemas/Joint'
        is_valid:
          type: boolean
          default: false
        arm_id:
          type: string
        end_effector_id:
          type: string
        id:
          type: string
          default: ''
      x-module-name: arcor2.data.common
      description: 'ProjectRobotJoints(name: ''str'', robot_id: ''str'', joints: ''list[Joint]'',
        is_valid: ''bool'' = False, arm_id: ''Optional[str]'' = None, end_effector_id:
        ''Optional[str]'' = None, id: ''str'' = '''')'
    Joint:
      type: object
      required:
      - name
      - value
      properties:
        name:
          type: string
        value:
          type: number
      x-module-name: arcor2.data.common
      description: 'Joint(name: ''str'', value: ''float'')'
    Action:
      allOf:
      - $ref: '#/components/schemas/BareAction'
      - type: object
        properties:
          parameters:
            type: array
            items:
              $ref: '#/components/schemas/ActionParameter'
            default: []
          flows:
            type: array
            items:
              $ref: '#/components/schemas/Flow'
            default: []
        x-module-name: arcor2.data.common
      description: 'Action(name: ''str'', type: ''str'', id: ''str'' = '''', parameters:
        ''list[ActionParameter]'' = <factory>, flows: ''list[Flow]'' = <factory>)'
    ActionParameter:
      allOf:
      - $ref: '#/components/schemas/Parameter'
      - type: object
        properties: {}
        x-module-name: arcor2.data.common
      description: 'ActionParameter(name: ''str'', type: ''str'', value: ''str'')'
    Flow:
      type: object
      properties:
        type:
          type: string
          enum:
          - default
          x-enum-name: FlowTypes
          x-module-name: arcor2.data.common
          default: default
        outputs:
          type: array
          items:
            type: string
          default: []
      x-module-name: arcor2.data.common
      description: 'Flow(type: ''FlowTypes'' = <FlowTypes.DEFAULT: ''default''>, outputs:
        ''list[str]'' = <factory>)'
    BareAction:
      type: object
      required:
      - name
      - type
      properties:
        name:
          type: string
        type:
          type: string
        id:
          type: string
          default: ''
      x-module-name: arcor2.data.common
      description: 'BareAction(name: ''str'', type: ''str'', id: ''str'' = '''')'
    BareActionPoint:
      type: object
      required:
      - name
      - position
      properties:
        name:
          type: string
        position:
          $ref: '#/components/schemas/Position'
        parent:
          type: string
        display_name:
          type: string
        description:
          type: string
        id:
          type: string
          default: ''
      x-module-name: arcor2.data.common
      description: 'BareActionPoint(name: ''str'', position: ''Position'', parent:
        ''Optional[str]'' = None, display_name: ''Optional[str]'' = None, description:
        ''Optional[str]'' = None, id: ''str'' = '''')'
    ProjectParameter:
      allOf:
      - $ref: '#/components/schemas/Parameter'
      - type: object
        properties:
          range:
            $ref: '#/components/schemas/Range'
          display_name:
            type: string
          description:
            type: string
          id:
            type: string
            default: ''
        x-module-name: arcor2.data.common
      description: 'ProjectParameter(name: ''str'', type: ''str'', value: ''str'',
        range: ''Optional[Range]'' = None, display_name: ''Optional[str]'' = None,
        description: ''Optional[str]'' = None, id: ''str'' = '''')'
    Range:
      type: object
      required:
      - min
      - max
      properties:
        min:
          type: number
        max:
          type: number
      x-module-name: arcor2.data.common
      description: 'Range(min: ''float'', max: ''float'')'
    ProjectFunction:
      type: object
      required:
      - name
      properties:
        name:
          type: string
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
          default: []
        logic:
          type: array
          items:
            $ref: '#/components/schemas/LogicItem'
          default: []
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ActionParameter'
          default: []
        returns:
          type: array
          items:
            $ref: '#/components/schemas/FunctionReturns'
          default: []
        id:
          type: string
          default: ''
      x-module-name: arcor2.data.common
      description: 'ProjectFunction(name: ''str'', actions: ''list[Action]'' = <factory>,
        logic: ''list[LogicItem]'' = <factory>, parameters: ''list[ActionParameter]''
        = <factory>, returns: ''list[FunctionReturns]'' = <factory>, id: ''str'' =
        '''')'
    LogicItem:
      type: object
      required:
      - start
      - end
      properties:
        start:
          type: string
        end:
          type: string
        condition:
          $ref: '#/components/schemas/ProjectLogicIf'
        id:
          type: string
          default: ''
      x-module-name: arcor2.data.common
      description: 'LogicItem(start: ''str'', end: ''str'', condition: ''Optional[ProjectLogicIf]''
        = None, id: ''str'' = '''')'
    ProjectLogicIf:
      type: object
      required:
      - what
      - value
      properties:
        what:
          type: string
        value:
          type: string
      x-module-name: arcor2.data.common
      description: 'ProjectLogicIf(what: ''str'', value: ''str'')'
    FunctionReturns:
      type: object
      required:
      - type
      - link
      properties:
        type:
          type: string
        link:
          type: string
      x-module-name: arcor2.data.common
      description: 'FunctionReturns(type: ''str'', link: ''str'')'
    SceneObjectOverride:
      type: object
      required:
      - id
      - parameters
      properties:
        id:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
      x-module-name: arcor2.data.common
      description: 'SceneObjectOverride(id: ''str'', parameters: ''list[Parameter]'')'
    BareProject:
      type: object
      required:
      - name
      - scene_id
      properties:
        name:
          type: string
        scene_id:
          type: string
        description:
          type: string
          default: ''
        has_logic:
          type: boolean
          default: true
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
        int_modified:
          type: string
          format: date-time
        id:
          type: string
          default: ''
      x-module-name: arcor2.data.common
      description: 'BareProject(name: ''str'', scene_id: ''str'', description: ''str''
        = <factory>, has_logic: ''bool'' = True, created: ''Optional[datetime]'' =
        None, modified: ''Optional[datetime]'' = None, int_modified: ''Optional[datetime]''
        = None, id: ''str'' = '''')'
    CollisionModels:
      type: object
      properties:
        boxes:
          type: array
          items:
            $ref: '#/components/schemas/Box'
          default: []
        spheres:
          type: array
          items:
            $ref: '#/components/schemas/Sphere'
          default: []
        cylinders:
          type: array
          items:
            $ref: '#/components/schemas/Cylinder'
          default: []
        meshes:
          type: array
          items:
            $ref: '#/components/schemas/Mesh'
          default: []
      x-module-name: arcor2.data.object_type
      description: 'CollisionModels(boxes: list[arcor2.data.object_type.Box] = <factory>,
        spheres: list[arcor2.data.object_type.Sphere] = <factory>, cylinders: list[arcor2.data.object_type.Cylinder]
        = <factory>, meshes: list[arcor2.data.object_type.Mesh] = <factory>)'
    Box:
      allOf:
      - $ref: '#/components/schemas/Model'
      - type: object
        required:
        - size_x
        - size_y
        - size_z
        properties:
          size_x:
            type: number
          size_y:
            type: number
          size_z:
            type: number
        x-module-name: arcor2.data.object_type
      description: 'Box(id: str, size_x: float, size_y: float, size_z: float)'
    Model:
      type: object
      required:
      - id
      properties:
        id:
          type: string
      x-module-name: arcor2.data.object_type
      description: 'Model(id: str)'
    Sphere:
      allOf:
      - $ref: '#/components/schemas/Model'
      - type: object
        required:
        - radius
        properties:
          radius:
            type: number
        x-module-name: arcor2.data.object_type
      description: 'Sphere(id: str, radius: float)'
    Cylinder:
      allOf:
      - $ref: '#/components/schemas/Model'
      - type: object
        required:
        - radius
        - height
        properties:
          radius:
            type: number
          height:
            type: number
        x-module-name: arcor2.data.object_type
      description: 'Cylinder(id: str, radius: float, height: float)'
    Mesh:
      allOf:
      - $ref: '#/components/schemas/Model'
      - type: object
        required:
        - asset_id
        properties:
          asset_id:
            type: string
          focus_points:
            type: array
            items:
              $ref: '#/components/schemas/Pose'
        x-module-name: arcor2.data.object_type
      description: 'Mesh(id: str, asset_id: str, focus_points: Optional[list[arcor2.data.common.Pose]]
        = None)'
    PackageInfo:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/PackageInfoData'
        x-module-name: arcor2.data.events
      description: 'PackageInfo(data: arcor2.data.events.PackageInfo.Data)'
    PackageStateData:
      type: object
      properties:
        state:
          type: string
          enum:
          - running
          - stopping
          - stopped
          - pausing
          - paused
          - resuming
          - undefined
          x-enum-name: PackageStateDataStateEnum
          x-module-name: arcor2.data.events
          default: undefined
        package_id:
          type: string
      x-module-name: arcor2.data.events
      description: 'Data(state: arcor2.data.events.PackageState.Data.StateEnum = <StateEnum.UNDEFINED:
        ''undefined''>, package_id: Optional[str] = None)'
    PackageState:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/PackageStateData'
        x-module-name: arcor2.data.events
      description: 'PackageState(data: arcor2.data.events.PackageState.Data)'
    ProjectExceptionData:
      type: object
      required:
      - message
      - type
      properties:
        message:
          type: string
        type:
          type: string
        handled:
          type: boolean
          default: false
      x-module-name: arcor2.data.events
      description: 'Data(message: str, type: str, handled: bool = False)'
    ProjectException:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/ProjectExceptionData'
        x-module-name: arcor2.data.events
      description: 'ProjectException(data: arcor2.data.events.ProjectException.Data)'
    RobotEefData:
      type: object
      required:
      - robot_id
      properties:
        robot_id:
          type: string
        end_effectors:
          type: array
          items:
            $ref: '#/components/schemas/RobotEefDataEefPose'
          default: []
      x-module-name: arcor2_runtime.events
      description: 'Data(robot_id: str, end_effectors: list[arcor2_runtime.events.RobotEef.Data.EefPose]
        = <factory>)'
    RobotEefDataEefPose:
      type: object
      required:
      - end_effector_id
      - pose
      properties:
        end_effector_id:
          type: string
        pose:
          $ref: '#/components/schemas/Pose'
        arm_id:
          type: string
      x-module-name: arcor2_runtime.events
      description: 'EefPose(end_effector_id: str, pose: arcor2.data.common.Pose, arm_id:
        Optional[str] = None)'
    RobotEef:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/RobotEefData'
        x-module-name: arcor2_runtime.events
      description: 'RobotEef(data: arcor2_runtime.events.RobotEef.Data)'
    RobotJointsData:
      type: object
      required:
      - robot_id
      - joints
      properties:
        robot_id:
          type: string
        joints:
          type: array
          items:
            $ref: '#/components/schemas/Joint'
      x-module-name: arcor2_runtime.events
      description: 'Data(robot_id: str, joints: list[arcor2.data.common.Joint])'
    RobotJoints:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/RobotJointsData'
        x-module-name: arcor2_runtime.events
      description: 'RobotJoints(data: arcor2_runtime.events.RobotJoints.Data)'
    ActionCancelled:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.events.actions
      description: Used to notify that the action execution was cancelled.
    ActionExecutionData:
      type: object
      properties:
        action_id:
          type: string
          default: ''
      x-module-name: arcor2_arserver_data.events.actions
      description: 'Data(action_id: str = '''')'
    ActionExecution:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/ActionExecutionData'
        x-module-name: arcor2_arserver_data.events.actions
      description: "Used to notify beginning of the action execution triggered while\
        \ editing\n    a project."
    ActionResultData:
      type: object
      required:
      - action_id
      properties:
        action_id:
          type: string
        results:
          type: array
          items:
            type: string
          description: JSON-encoded results of the action.
        error:
          type: string
      x-module-name: arcor2_arserver_data.events.actions
      description: 'Data(action_id: str, results: Optional[list[str]] = None, error:
        Optional[str] = None)'
    ActionResult:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/ActionResultData'
        x-module-name: arcor2_arserver_data.events.actions
      description: "Used to notify result of the action execution triggered while\
        \ editing a\n    project."
    ProcessStateData:
      type: object
      required:
      - id
      - state
      properties:
        id:
          type: string
        state:
          type: string
          enum:
          - started
          - finished
          - failed
          x-enum-name: ProcessStateDataStateEnum
          x-module-name: arcor2_arserver_data.events.common
        message:
          type: string
      x-module-name: arcor2_arserver_data.events.common
      description: 'Data(id: str, state: arcor2_arserver_data.events.common.ProcessState.Data.StateEnum,
        message: Optional[str] = None)'
    ProcessState:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/ProcessStateData'
        x-module-name: arcor2_arserver_data.events.common
      description: 'ProcessState(data: arcor2_arserver_data.events.common.ProcessState.Data)'
    ShowMainScreenData:
      type: object
      required:
      - what
      properties:
        what:
          type: string
          enum:
          - ScenesList
          - ProjectsList
          - PackagesList
          x-enum-name: ShowMainScreenDataWhatEnum
          x-module-name: arcor2_arserver_data.events.common
        highlight:
          type: string
      x-module-name: arcor2_arserver_data.events.common
      description: 'Data(what: arcor2_arserver_data.events.common.ShowMainScreen.Data.WhatEnum,
        highlight: Optional[str] = None)'
    ShowMainScreen:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/ShowMainScreenData'
        x-module-name: arcor2_arserver_data.events.common
      description: 'ShowMainScreen(data: arcor2_arserver_data.events.common.ShowMainScreen.Data)'
    LockData:
      type: object
      required:
      - object_ids
      - owner
      properties:
        object_ids:
          type: array
          items:
            type: string
        owner:
          type: string
      x-module-name: arcor2_arserver_data.events.lock
      description: 'LockData(object_ids: list[str], owner: str)'
    ObjectsLocked:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/LockData'
        x-module-name: arcor2_arserver_data.events.lock
      description: 'ObjectsLocked(data: arcor2_arserver_data.events.lock.LockData)'
    ObjectsUnlocked:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/LockData'
        x-module-name: arcor2_arserver_data.events.lock
      description: 'ObjectsUnlocked(data: arcor2_arserver_data.events.lock.LockData)'
    ObjectTypeMeta:
      type: object
      required:
      - type
      properties:
        type:
          type: string
        description:
          type: string
          default: ''
        built_in:
          type: boolean
          default: false
        base:
          type: string
          default: ''
        object_model:
          $ref: '#/components/schemas/ObjectModel'
        needs_parent_type:
          type: string
        has_pose:
          type: boolean
          default: false
        abstract:
          type: boolean
          default: false
        disabled:
          type: boolean
          default: false
        problem:
          type: string
        settings:
          type: array
          items:
            $ref: '#/components/schemas/ParameterMeta'
          default: []
        modified:
          type: string
          format: date-time
      x-module-name: arcor2_arserver_data.objects
      description: Metadata about object type, as it is used in server API.
    ObjectModel:
      type: object
      required:
      - type
      properties:
        type:
          type: string
          enum:
          - None
          - Box
          - Cylinder
          - Sphere
          - Mesh
          x-enum-name: Model3dType
          x-module-name: arcor2.data.object_type
        box:
          $ref: '#/components/schemas/Box'
        cylinder:
          $ref: '#/components/schemas/Cylinder'
        sphere:
          $ref: '#/components/schemas/Sphere'
        mesh:
          $ref: '#/components/schemas/Mesh'
      x-module-name: arcor2.data.object_type
      description: 'ObjectModel(type: arcor2.data.object_type.Model3dType, box: Optional[arcor2.data.object_type.Box]
        = None, cylinder: Optional[arcor2.data.object_type.Cylinder] = None, sphere:
        Optional[arcor2.data.object_type.Sphere] = None, mesh: Optional[arcor2.data.object_type.Mesh]
        = None)'
    ParameterMeta:
      type: object
      required:
      - name
      - type
      properties:
        name:
          type: string
        type:
          type: string
        dynamic_value:
          type: boolean
          default: false
        dynamic_value_parents:
          type: array
          items:
            type: string
          uniqueItems: true
        description:
          type: string
        default_value:
          type: string
        extra:
          type: string
      x-module-name: arcor2.data.object_type
      description: 'ParameterMeta(name: str, type: str, dynamic_value: bool = False,
        dynamic_value_parents: Optional[set[str]] = None, description: Optional[str]
        = None, default_value: Optional[str] = None, extra: Optional[str] = None)'
    ChangedObjectTypes:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/ObjectTypeMeta'
        x-module-name: arcor2_arserver_data.events.objects
      description: 'ChangedObjectTypes(data: list[arcor2_arserver_data.objects.ObjectTypeMeta])'
    OverrideUpdated:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/Parameter'
        x-module-name: arcor2_arserver_data.events.objects
      description: 'OverrideUpdated(data: arcor2.data.common.Parameter)'
    ActionChanged:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/BareAction'
        x-module-name: arcor2_arserver_data.events.project
      description: 'ActionChanged(data: arcor2.data.common.BareAction)'
    ActionPointChanged:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/BareActionPoint'
        x-module-name: arcor2_arserver_data.events.project
      description: 'ActionPointChanged(data: arcor2.data.common.BareActionPoint)'
    JointsChanged:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/ProjectRobotJoints'
        x-module-name: arcor2_arserver_data.events.project
      description: 'JointsChanged(data: arcor2.data.common.ProjectRobotJoints)'
    LogicItemChanged:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/LogicItem'
        x-module-name: arcor2_arserver_data.events.project
      description: 'LogicItemChanged(data: arcor2.data.common.LogicItem)'
    OpenProjectData:
      type: object
      required:
      - scene
      - project
      properties:
        scene:
          $ref: '#/components/schemas/Scene'
        project:
          $ref: '#/components/schemas/Project'
      x-module-name: arcor2_arserver_data.events.project
      description: 'Data(scene: arcor2.data.common.Scene, project: arcor2.data.common.Project)'
    OpenProject:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/OpenProjectData'
        x-module-name: arcor2_arserver_data.events.project
      description: 'OpenProject(data: arcor2_arserver_data.events.project.OpenProject.Data)'
    OrientationChanged:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/NamedOrientation'
        x-module-name: arcor2_arserver_data.events.project
      description: 'OrientationChanged(data: arcor2.data.common.NamedOrientation)'
    ProjectChanged:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/BareProject'
        x-module-name: arcor2_arserver_data.events.project
      description: 'ProjectChanged(data: arcor2.data.common.BareProject)'
    ProjectClosed:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.events.project
      description: ProjectClosed()
    ProjectParameterChanged:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/ProjectParameter'
        x-module-name: arcor2_arserver_data.events.project
      description: 'ProjectParameterChanged(data: arcor2.data.common.ProjectParameter)'
    ProjectSaved:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.events.project
      description: ProjectSaved()
    HandTeachingModeData:
      type: object
      required:
      - robot_id
      - enabled
      properties:
        robot_id:
          type: string
        enabled:
          type: boolean
        arm_id:
          type: string
      x-module-name: arcor2_arserver_data.events.robot
      description: 'Data(robot_id: str, enabled: bool, arm_id: Optional[str] = None)'
    HandTeachingMode:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/HandTeachingModeData'
        x-module-name: arcor2_arserver_data.events.robot
      description: 'HandTeachingMode(data: arcor2_arserver_data.events.robot.HandTeachingMode.Data)'
    RobotMoveToActionPointJointsData:
      allOf:
      - $ref: '#/components/schemas/RobotMoveToData'
      - type: object
        required:
        - joints_id
        - safe
        properties:
          joints_id:
            type: string
          safe:
            type: boolean
          message:
            type: string
          arm_id:
            type: string
        x-module-name: arcor2_arserver_data.events.robot
      description: 'Data(move_event_type: arcor2_arserver_data.events.robot.RobotMoveToData.MoveEventType,
        robot_id: str, joints_id: str, safe: bool, message: Optional[str] = None,
        arm_id: Optional[str] = None)'
    RobotMoveToData:
      type: object
      required:
      - move_event_type
      - robot_id
      properties:
        move_event_type:
          type: string
          enum:
          - start
          - end
          - failed
          x-enum-name: RobotMoveToDataMoveEventType
          x-module-name: arcor2_arserver_data.events.robot
        robot_id:
          type: string
      x-module-name: arcor2_arserver_data.events.robot
      description: 'RobotMoveToData(move_event_type: arcor2_arserver_data.events.robot.RobotMoveToData.MoveEventType,
        robot_id: str)'
    RobotMoveToActionPointJoints:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/RobotMoveToActionPointJointsData'
        x-module-name: arcor2_arserver_data.events.robot
      description: 'RobotMoveToActionPointJoints(data: arcor2_arserver_data.events.robot.RobotMoveToActionPointJoints.Data)'
    RobotMoveToActionPointOrientationData:
      allOf:
      - $ref: '#/components/schemas/RobotMoveToData'
      - type: object
        required:
        - end_effector_id
        - orientation_id
        - safe
        - linear
        properties:
          end_effector_id:
            type: string
          orientation_id:
            type: string
          safe:
            type: boolean
          linear:
            type: boolean
          message:
            type: string
          arm_id:
            type: string
        x-module-name: arcor2_arserver_data.events.robot
      description: 'Data(move_event_type: arcor2_arserver_data.events.robot.RobotMoveToData.MoveEventType,
        robot_id: str, end_effector_id: str, orientation_id: str, safe: bool, linear:
        bool, message: Optional[str] = None, arm_id: Optional[str] = None)'
    RobotMoveToActionPointOrientation:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/RobotMoveToActionPointOrientationData'
        x-module-name: arcor2_arserver_data.events.robot
      description: 'RobotMoveToActionPointOrientation(data: arcor2_arserver_data.events.robot.RobotMoveToActionPointOrientation.Data)'
    RobotMoveToJointsData:
      allOf:
      - $ref: '#/components/schemas/RobotMoveToData'
      - type: object
        required:
        - target_joints
        - safe
        properties:
          target_joints:
            type: array
            items:
              $ref: '#/components/schemas/Joint'
          safe:
            type: boolean
          message:
            type: string
          arm_id:
            type: string
        x-module-name: arcor2_arserver_data.events.robot
      description: 'Data(move_event_type: arcor2_arserver_data.events.robot.RobotMoveToData.MoveEventType,
        robot_id: str, target_joints: list[arcor2.data.common.Joint], safe: bool,
        message: Optional[str] = None, arm_id: Optional[str] = None)'
    RobotMoveToJoints:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/RobotMoveToJointsData'
        x-module-name: arcor2_arserver_data.events.robot
      description: 'RobotMoveToJoints(data: arcor2_arserver_data.events.robot.RobotMoveToJoints.Data)'
    RobotMoveToPoseData:
      allOf:
      - $ref: '#/components/schemas/RobotMoveToData'
      - type: object
        required:
        - end_effector_id
        - target_pose
        - safe
        - linear
        properties:
          end_effector_id:
            type: string
          target_pose:
            $ref: '#/components/schemas/Pose'
          safe:
            type: boolean
          linear:
            type: boolean
          message:
            type: string
          arm_id:
            type: string
        x-module-name: arcor2_arserver_data.events.robot
      description: 'Data(move_event_type: arcor2_arserver_data.events.robot.RobotMoveToData.MoveEventType,
        robot_id: str, end_effector_id: str, target_pose: arcor2.data.common.Pose,
        safe: bool, linear: bool, message: Optional[str] = None, arm_id: Optional[str]
        = None)'
    RobotMoveToPose:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/RobotMoveToPoseData'
        x-module-name: arcor2_arserver_data.events.robot
      description: 'RobotMoveToPose(data: arcor2_arserver_data.events.robot.RobotMoveToPose.Data)'
    OpenSceneData:
      type: object
      required:
      - scene
      properties:
        scene:
          $ref: '#/components/schemas/Scene'
      x-module-name: arcor2_arserver_data.events.scene
      description: 'Data(scene: arcor2.data.common.Scene)'
    OpenScene:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/OpenSceneData'
        x-module-name: arcor2_arserver_data.events.scene
      description: 'OpenScene(data: arcor2_arserver_data.events.scene.OpenScene.Data)'
    SceneChanged:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/BareScene'
        x-module-name: arcor2_arserver_data.events.scene
      description: 'SceneChanged(data: arcor2.data.common.BareScene)'
    SceneClosed:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.events.scene
      description: SceneClosed()
    SceneObjectChanged:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/SceneObject'
        x-module-name: arcor2_arserver_data.events.scene
      description: 'SceneObjectChanged(data: arcor2.data.common.SceneObject)'
    SceneSaved:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.events.scene
      description: SceneSaved()
    SceneStateData:
      type: object
      required:
      - state
      properties:
        state:
          type: string
          enum:
          - stopped
          - starting
          - started
          - stopping
          x-enum-name: SceneStateDataStateEnum
          x-module-name: arcor2_arserver_data.events.scene
        message:
          type: string
      x-module-name: arcor2_arserver_data.events.scene
      description: 'Data(state: arcor2_arserver_data.events.scene.SceneState.Data.StateEnum,
        message: Optional[str] = None)'
    SceneState:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/SceneStateData'
        x-module-name: arcor2_arserver_data.events.scene
      description: 'SceneState(data: arcor2_arserver_data.events.scene.SceneState.Data)'
    Request:
      type: object
      required:
      - id
      - request
      properties:
        id:
          type: integer
        request:
          type: string
      x-module-name: arcor2.data.rpc.common
      description: 'Request(id: int)'
    SystemInfoRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.common
      description: 'Request(id: int)'
    SystemInfoResponseData:
      type: object
      required:
      - version
      - api_version
      properties:
        version:
          type: string
        api_version:
          type: string
        supported_parameter_types:
          type: array
          items:
            type: string
          uniqueItems: true
          default: []
        supported_rpc_requests:
          type: array
          items:
            type: string
          uniqueItems: true
          default: []
      x-module-name: arcor2_arserver_data.rpc.common
      description: 'Data(version: str, api_version: str, supported_parameter_types:
        set[str] = <factory>, supported_rpc_requests: set[str] = <factory>)'
    Response:
      type: object
      required:
      - response
      properties:
        id:
          type: integer
          default: 0
        response:
          type: string
        result:
          type: boolean
          default: true
        messages:
          type: array
          items:
            type: string
      x-module-name: arcor2.data.rpc.common
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    SystemInfoResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/SystemInfoResponseData'
        x-module-name: arcor2_arserver_data.rpc.common
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[arcor2_arserver_data.rpc.common.SystemInfo.Response.Data]
        = None)'
    CalibrateCameraRequestArgs:
      type: object
      required:
      - id
      properties:
        id:
          type: string
          description: Camera id.
      x-module-name: arcor2_arserver_data.rpc.camera
      description: 'Args(id: str)'
    CalibrateCameraRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/CalibrateCameraRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.camera
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.camera.CalibrateCamera.Request.Args)'
    CalibrateCameraResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.camera
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    CameraColorImageRequestArgs:
      type: object
      required:
      - id
      properties:
        id:
          type: string
          description: Camera id.
      x-module-name: arcor2_arserver_data.rpc.camera
      description: 'Args(id: str)'
    CameraColorImageRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/CameraColorImageRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.camera
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.camera.CameraColorImage.Request.Args)'
    CameraColorImageResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            type: string
        x-module-name: arcor2_arserver_data.rpc.camera
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[str] = None)'
    CameraColorParametersRequestArgs:
      type: object
      required:
      - id
      properties:
        id:
          type: string
          description: Camera id.
      x-module-name: arcor2_arserver_data.rpc.camera
      description: 'Args(id: str)'
    CameraColorParametersRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/CameraColorParametersRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.camera
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.camera.CameraColorParameters.Request.Args)'
    CameraParameters:
      type: object
      required:
      - fx
      - fy
      - cx
      - cy
      - dist_coefs
      properties:
        fx:
          type: number
        fy:
          type: number
        cx:
          type: number
        cy:
          type: number
        dist_coefs:
          type: array
          items:
            type: number
      x-module-name: arcor2.data.camera
      description: 'CameraParameters(fx: float, fy: float, cx: float, cy: float, dist_coefs:
        list[float])'
    CameraColorParametersResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/CameraParameters'
        x-module-name: arcor2_arserver_data.rpc.camera
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[arcor2.data.camera.CameraParameters] = None)'
    BuildProjectRequestArgs:
      type: object
      required:
      - project_id
      - package_name
      properties:
        project_id:
          type: string
        package_name:
          type: string
      x-module-name: arcor2_arserver_data.rpc.build
      description: 'Args(project_id: str, package_name: str)'
    BuildProjectRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/BuildProjectRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.build
      description: "Calls Build service to generate execution package and uploads\
        \ it to\n        the Execution service."
    BuildProjectResponseData:
      type: object
      required:
      - package_id
      properties:
        package_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.build
      description: 'Data(package_id: str)'
    BuildProjectResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/BuildProjectResponseData'
        x-module-name: arcor2_arserver_data.rpc.build
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[arcor2_arserver_data.rpc.build.BuildProject.Response.Data]
        = None)'
    TemporaryPackageRequestArgs:
      type: object
      properties:
        start_paused:
          type: boolean
          default: false
        breakpoints:
          type: array
          items:
            type: string
          uniqueItems: true
      x-module-name: arcor2_arserver_data.rpc.build
      description: 'Args(start_paused: bool = False, breakpoints: Optional[set[str]]
        = None)'
    TemporaryPackageRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        properties:
          args:
            $ref: '#/components/schemas/TemporaryPackageRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.build
      description: 'Request(id: int, args: Optional[arcor2_arserver_data.rpc.build.TemporaryPackage.Request.Args]
        = None)'
    TemporaryPackageResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.build
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    ReadLockRequestArgs:
      type: object
      required:
      - object_id
      properties:
        object_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.lock
      description: 'Args(object_id: str)'
    ReadLockRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/ReadLockRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.lock
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.lock.ReadLock.Request.Args)'
    ReadLockResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.lock
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    ReadUnlockRequestArgs:
      type: object
      required:
      - object_id
      properties:
        object_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.lock
      description: 'Args(object_id: str)'
    ReadUnlockRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/ReadUnlockRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.lock
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.lock.ReadUnlock.Request.Args)'
    ReadUnlockResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.lock
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    UpdateLockRequestArgs:
      type: object
      required:
      - object_id
      - new_type
      properties:
        object_id:
          type: string
        new_type:
          type: string
          enum:
          - TREE
          - OBJECT
          x-enum-name: UpdateType
          x-module-name: arcor2_arserver_data.rpc.lock
      x-module-name: arcor2_arserver_data.rpc.lock
      description: 'Args(object_id: str, new_type: arcor2_arserver_data.rpc.lock.UpdateType)'
    UpdateLockRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/UpdateLockRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.lock
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.lock.UpdateLock.Request.Args)'
    UpdateLockResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.lock
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    WriteLockRequestArgs:
      type: object
      required:
      - object_id
      properties:
        object_id:
          type: string
        lock_tree:
          type: boolean
          default: false
      x-module-name: arcor2_arserver_data.rpc.lock
      description: 'Args(object_id: str, lock_tree: bool = False)'
    WriteLockRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/WriteLockRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.lock
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.lock.WriteLock.Request.Args)'
    WriteLockResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.lock
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    WriteUnlockRequestArgs:
      type: object
      required:
      - object_id
      properties:
        object_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.lock
      description: 'Args(object_id: str)'
    WriteUnlockRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/WriteUnlockRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.lock
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.lock.WriteUnlock.Request.Args)'
    WriteUnlockResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.lock
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    AddOverrideRequestArgs:
      type: object
      required:
      - id
      - override
      properties:
        id:
          type: string
        override:
          $ref: '#/components/schemas/Parameter'
      x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Args(id: str, override: arcor2.data.common.Parameter)'
    AddOverrideRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/AddOverrideRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.objects.AddOverride.Request.Args,
        dry_run: bool = False)'
    AddOverrideResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    DeleteObjectTypesRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        properties:
          args:
            type: array
            items:
              type: string
            uniqueItems: true
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Request(id: int, args: Optional[set[str]] = None, dry_run: bool
        = False)'
    DeleteObjectTypesResponseData:
      type: object
      required:
      - id
      - error
      properties:
        id:
          type: string
        error:
          type: string
      x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Data(id: str, error: str)'
    DeleteObjectTypesResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/DeleteObjectTypesResponseData'
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[list[arcor2_arserver_data.rpc.objects.DeleteObjectTypes.Response.Data]]
        = None)'
    DeleteOverrideRequestArgs:
      type: object
      required:
      - id
      - override
      properties:
        id:
          type: string
        override:
          $ref: '#/components/schemas/Parameter'
      x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Args(id: str, override: arcor2.data.common.Parameter)'
    DeleteOverrideRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/DeleteOverrideRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.objects.DeleteOverride.Request.Args,
        dry_run: bool = False)'
    DeleteOverrideResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    TypeArgs:
      type: object
      required:
      - type
      properties:
        type:
          type: string
      x-module-name: arcor2.data.rpc.common
      description: 'TypeArgs(type: str)'
    GetActionsRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/TypeArgs'
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Request(id: int, args: arcor2.data.rpc.common.TypeArgs)'
    ObjectAction:
      type: object
      required:
      - name
      properties:
        name:
          type: string
        description:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ParameterMeta'
          default: []
        meta:
          $ref: '#/components/schemas/ActionMetadata'
          default:
            composite: false
            hidden: false
            cancellable: false
        origins:
          type: string
        returns:
          type: array
          items:
            type: string
          default: []
        disabled:
          type: boolean
          default: false
        problem:
          type: string
      x-module-name: arcor2_arserver_data.objects
      description: 'ObjectAction(name: str, description: Optional[str] = None, parameters:
        list[arcor2.data.object_type.ParameterMeta] = <factory>, meta: arcor2.data.common.ActionMetadata
        = <factory>, origins: Optional[str] = None, returns: list[str] = <factory>,
        disabled: bool = False, problem: Optional[str] = None)'
    ActionMetadata:
      type: object
      properties:
        composite:
          type: boolean
          default: false
          description: Should be set for nested actions.
        hidden:
          type: boolean
          default: false
          description: When set, action will be hidden in UIs.
        cancellable:
          type: boolean
          default: false
          description: Defines whether action execution can be cancelled.
      x-module-name: arcor2.data.common
      description: 'ActionMetadata(composite: ''bool'' = False, hidden: ''bool'' =
        False)'
    GetActionsResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/ObjectAction'
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[list[arcor2_arserver_data.objects.ObjectAction]] =
        None)'
    GetObjectTypesRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Request(id: int)'
    GetObjectTypesResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/ObjectTypeMeta'
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[list[arcor2_arserver_data.objects.ObjectTypeMeta]]
        = None)'
    NewObjectTypeRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/ObjectTypeMeta'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Request(id: int, args: arcor2_arserver_data.objects.ObjectTypeMeta,
        dry_run: bool = False)'
    NewObjectTypeResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    ObjectAimingAddPointRequestArgs:
      type: object
      required:
      - point_idx
      properties:
        point_idx:
          type: integer
      x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Args(point_idx: int)'
    ObjectAimingAddPointRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/ObjectAimingAddPointRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.objects.ObjectAimingAddPoint.Request.Args,
        dry_run: bool = False)'
    ObjectAimingAddPointResponseData:
      type: object
      required:
      - finished_indexes
      properties:
        finished_indexes:
          type: array
          items:
            type: integer
      x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Data(finished_indexes: list[int])'
    ObjectAimingAddPointResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/ObjectAimingAddPointResponseData'
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[arcor2_arserver_data.rpc.objects.ObjectAimingAddPoint.Response.Data]
        = None)'
    ObjectAimingCancelRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        properties:
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Request(id: int, dry_run: bool = False)'
    ObjectAimingCancelResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    ObjectAimingDoneRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        properties:
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Request(id: int, dry_run: bool = False)'
    ObjectAimingDoneResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/ObjectAimingAddPointResponseData'
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[arcor2_arserver_data.rpc.objects.ObjectAimingAddPoint.Response.Data]
        = None)'
    ObjectAimingStartRequestArgs:
      type: object
      required:
      - object_id
      - robot
      properties:
        object_id:
          type: string
        robot:
          $ref: '#/components/schemas/RobotArg'
      x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Args(object_id: str, robot: arcor2.data.rpc.common.RobotArg)'
    RobotArg:
      type: object
      required:
      - robot_id
      - end_effector
      properties:
        robot_id:
          type: string
          description: Object id of the robot or robot_id within the robot service.
        end_effector:
          type: string
        arm_id:
          type: string
      x-module-name: arcor2.data.rpc.common
      description: 'RobotArg(robot_id: str, end_effector: str, arm_id: Optional[str]
        = None)'
    ObjectAimingStartRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/ObjectAimingStartRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.objects.ObjectAimingStart.Request.Args,
        dry_run: bool = False)'
    ObjectAimingStartResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    IdArgs:
      type: object
      required:
      - id
      properties:
        id:
          type: string
      x-module-name: arcor2.data.rpc.common
      description: 'IdArgs(id: str)'
    ObjectTypeUsageRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/IdArgs'
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Request(id: int, args: arcor2.data.rpc.common.IdArgs)'
    ObjectTypeUsageResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            type: array
            items:
              type: string
            uniqueItems: true
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[set[str]] = None)'
    UpdateObjectModelRequestArgs:
      type: object
      required:
      - object_type_id
      - object_model
      properties:
        object_type_id:
          type: string
          description: Object or service id.
        object_model:
          $ref: '#/components/schemas/ObjectModel'
      x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Args(object_type_id: str, object_model: arcor2.data.object_type.ObjectModel)'
    UpdateObjectModelRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/UpdateObjectModelRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.objects.UpdateObjectModel.Request.Args,
        dry_run: bool = False)'
    UpdateObjectModelResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    UpdateOverrideRequestArgs:
      type: object
      required:
      - id
      - override
      properties:
        id:
          type: string
        override:
          $ref: '#/components/schemas/Parameter'
      x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Args(id: str, override: arcor2.data.common.Parameter)'
    UpdateOverrideRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/UpdateOverrideRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.objects.UpdateOverride.Request.Args,
        dry_run: bool = False)'
    UpdateOverrideResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    AddActionRequestArgs:
      type: object
      required:
      - action_point_id
      - name
      - type
      properties:
        action_point_id:
          type: string
        name:
          type: string
        type:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ActionParameter'
          default: []
        flows:
          type: array
          items:
            $ref: '#/components/schemas/Flow'
          default: []
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(action_point_id: str, name: str, type: str, parameters: list[arcor2.data.common.ActionParameter]
        = <factory>, flows: list[arcor2.data.common.Flow] = <factory>)'
    AddActionRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/AddActionRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.AddAction.Request.Args,
        dry_run: bool = False)'
    AddActionResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    AddActionPointRequestArgs:
      type: object
      required:
      - name
      - position
      properties:
        name:
          type: string
        position:
          $ref: '#/components/schemas/Position'
        parent:
          type: string
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(name: str, position: arcor2.data.common.Position, parent:
        Optional[str] = None)'
    AddActionPointRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/AddActionPointRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.AddActionPoint.Request.Args,
        dry_run: bool = False)'
    AddActionPointResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    AddActionPointJointsUsingRobotRequestArgs:
      type: object
      required:
      - action_point_id
      - robot_id
      properties:
        action_point_id:
          type: string
        robot_id:
          type: string
        name:
          type: string
          default: default
        arm_id:
          type: string
        end_effector_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(action_point_id: str, robot_id: str, name: str = ''default'',
        arm_id: Optional[str] = None, end_effector_id: Optional[str] = None)'
    AddActionPointJointsUsingRobotRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/AddActionPointJointsUsingRobotRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.AddActionPointJointsUsingRobot.Request.Args,
        dry_run: bool = False)'
    AddActionPointJointsUsingRobotResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    AddActionPointOrientationRequestArgs:
      type: object
      required:
      - action_point_id
      - orientation
      properties:
        action_point_id:
          type: string
        orientation:
          $ref: '#/components/schemas/Orientation'
        name:
          type: string
          default: default
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(action_point_id: str, orientation: arcor2.data.common.Orientation,
        name: str = ''default'')'
    AddActionPointOrientationRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/AddActionPointOrientationRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.AddActionPointOrientation.Request.Args,
        dry_run: bool = False)'
    AddActionPointOrientationResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    AddActionPointOrientationUsingRobotRequestArgs:
      type: object
      required:
      - action_point_id
      - robot
      properties:
        action_point_id:
          type: string
        robot:
          $ref: '#/components/schemas/RobotArg'
        name:
          type: string
          default: default
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(action_point_id: str, robot: arcor2.data.rpc.common.RobotArg,
        name: str = ''default'')'
    AddActionPointOrientationUsingRobotRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/AddActionPointOrientationUsingRobotRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.AddActionPointOrientationUsingRobot.Request.Args,
        dry_run: bool = False)'
    AddActionPointOrientationUsingRobotResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    AddApUsingRobotRequestArgs:
      type: object
      required:
      - robot_id
      - end_effector_id
      - name
      properties:
        robot_id:
          type: string
        end_effector_id:
          type: string
        name:
          type: string
        arm_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(robot_id: str, end_effector_id: str, name: str, arm_id: Optional[str]
        = None)'
    AddApUsingRobotRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/AddApUsingRobotRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.AddApUsingRobot.Request.Args,
        dry_run: bool = False)'
    AddApUsingRobotResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    AddLogicItemRequestArgs:
      type: object
      required:
      - start
      - end
      properties:
        start:
          type: string
        end:
          type: string
        condition:
          $ref: '#/components/schemas/ProjectLogicIf'
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(start: str, end: str, condition: Optional[arcor2.data.common.ProjectLogicIf]
        = None)'
    AddLogicItemRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/AddLogicItemRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.AddLogicItem.Request.Args,
        dry_run: bool = False)'
    AddLogicItemResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    AddProjectParameterRequestArgs:
      type: object
      required:
      - name
      - type
      - value
      properties:
        name:
          type: string
        type:
          type: string
        value:
          type: string
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(name: str, type: str, value: str)'
    AddProjectParameterRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/AddProjectParameterRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.AddProjectParameter.Request.Args,
        dry_run: bool = False)'
    AddProjectParameterResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    CancelActionRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int)'
    CancelActionResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    CloseProjectRequestArgs:
      type: object
      properties:
        force:
          type: boolean
          default: false
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(force: bool = False)'
    CloseProjectRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        properties:
          args:
            $ref: '#/components/schemas/CloseProjectRequestArgs'
            default:
              force: false
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.CloseProject.Request.Args
        = <factory>, dry_run: bool = False)'
    CloseProjectResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    CopyActionPointRequestArgs:
      type: object
      required:
      - id
      properties:
        id:
          type: string
        position:
          $ref: '#/components/schemas/Position'
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(id: str, position: Optional[arcor2.data.common.Position]
        = None)'
    CopyActionPointRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/CopyActionPointRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.CopyActionPoint.Request.Args,
        dry_run: bool = False)'
    CopyActionPointResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    CopyProjectRequestArgs:
      type: object
      required:
      - source_id
      - target_name
      properties:
        source_id:
          type: string
        target_name:
          type: string
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(source_id: str, target_name: str)'
    CopyProjectRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/CopyProjectRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.CopyProject.Request.Args,
        dry_run: bool = False)'
    CopyProjectResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    DeleteProjectRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/IdArgs'
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2.data.rpc.common.IdArgs)'
    DeleteProjectResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    ExecuteActionRequestArgs:
      type: object
      required:
      - action_id
      properties:
        action_id:
          type: string
          description: ID of the action to be executed.
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(action_id: str)'
    ExecuteActionRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/ExecuteActionRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.ExecuteAction.Request.Args,
        dry_run: bool = False)'
    ExecuteActionResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    GetProjectRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/IdArgs'
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2.data.rpc.common.IdArgs)'
    GetProjectResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/Project'
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[arcor2.data.common.Project] = None)'
    ListProjectsRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int)'
    ListProjectsResponseData:
      allOf:
      - $ref: '#/components/schemas/BareProject'
      - type: object
        properties:
          problems:
            type: array
            items:
              type: string
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Data(name: ''str'', scene_id: ''str'', description: ''str'' =
        <factory>, has_logic: ''bool'' = True, created: ''Optional[datetime]'' = None,
        modified: ''Optional[datetime]'' = None, int_modified: ''Optional[datetime]''
        = None, id: ''str'' = '''', problems: Optional[list[str]] = None)'
    ListProjectsResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/ListProjectsResponseData'
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[list[arcor2_arserver_data.rpc.project.ListProjects.Response.Data]]
        = None)'
    NewProjectRequestArgs:
      type: object
      required:
      - scene_id
      - name
      properties:
        scene_id:
          type: string
        name:
          type: string
        description:
          type: string
          default: ''
        has_logic:
          type: boolean
          default: true
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(scene_id: str, name: str, description: str = <factory>, has_logic:
        bool = True)'
    NewProjectRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/NewProjectRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.NewProject.Request.Args,
        dry_run: bool = False)'
    NewProjectResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    OpenProjectRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/IdArgs'
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2.data.rpc.common.IdArgs)'
    OpenProjectResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    RemoveActionRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/IdArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2.data.rpc.common.IdArgs, dry_run:
        bool = False)'
    RemoveActionResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    RemoveActionPointRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/IdArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2.data.rpc.common.IdArgs, dry_run:
        bool = False)'
    RemoveActionPointResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    RemoveActionPointJointsRequestArgs:
      type: object
      required:
      - joints_id
      properties:
        joints_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(joints_id: str)'
    RemoveActionPointJointsRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/RemoveActionPointJointsRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.RemoveActionPointJoints.Request.Args)'
    RemoveActionPointJointsResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    RemoveActionPointOrientationRequestArgs:
      type: object
      required:
      - orientation_id
      properties:
        orientation_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(orientation_id: str)'
    RemoveActionPointOrientationRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/RemoveActionPointOrientationRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.RemoveActionPointOrientation.Request.Args,
        dry_run: bool = False)'
    RemoveActionPointOrientationResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    RemoveLogicItemRequestArgs:
      type: object
      required:
      - logic_item_id
      properties:
        logic_item_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(logic_item_id: str)'
    RemoveLogicItemRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/RemoveLogicItemRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.RemoveLogicItem.Request.Args)'
    RemoveLogicItemResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    RemoveProjectParameterRequestArgs:
      type: object
      required:
      - id
      properties:
        id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(id: str)'
    RemoveProjectParameterRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/RemoveProjectParameterRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.RemoveProjectParameter.Request.Args,
        dry_run: bool = False)'
    RemoveProjectParameterResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    RenameActionRequestArgs:
      type: object
      required:
      - action_id
      - new_name
      properties:
        action_id:
          type: string
        new_name:
          type: string
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(action_id: str, new_name: str)'
    RenameActionRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/RenameActionRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.RenameAction.Request.Args,
        dry_run: bool = False)'
    RenameActionResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    RenameActionPointRequestArgs:
      type: object
      required:
      - action_point_id
      - new_name
      properties:
        action_point_id:
          type: string
        new_name:
          type: string
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(action_point_id: str, new_name: str)'
    RenameActionPointRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/RenameActionPointRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.RenameActionPoint.Request.Args,
        dry_run: bool = False)'
    RenameActionPointResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    RenameActionPointJointsRequestArgs:
      type: object
      required:
      - joints_id
      - new_name
      properties:
        joints_id:
          type: string
        new_name:
          type: string
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(joints_id: str, new_name: str)'
    RenameActionPointJointsRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/RenameActionPointJointsRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.RenameActionPointJoints.Request.Args,
        dry_run: bool = False)'
    RenameActionPointJointsResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    RenameActionPointOrientationRequestArgs:
      type: object
      required:
      - orientation_id
      - new_name
      properties:
        orientation_id:
          type: string
        new_name:
          type: string
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(orientation_id: str, new_name: str)'
    RenameActionPointOrientationRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/RenameActionPointOrientationRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.RenameActionPointOrientation.Request.Args,
        dry_run: bool = False)'
    RenameActionPointOrientationResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    RenameProjectRequestArgs:
      type: object
      required:
      - project_id
      - new_name
      properties:
        project_id:
          type: string
        new_name:
          type: string
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(project_id: str, new_name: str)'
    RenameProjectRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/RenameProjectRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.RenameProject.Request.Args,
        dry_run: bool = False)'
    RenameProjectResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    SaveProjectRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        properties:
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, dry_run: bool = False)'
    SaveProjectResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    UpdateActionRequestArgs:
      type: object
      required:
      - action_id
      properties:
        action_id:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ActionParameter'
        flows:
          type: array
          items:
            $ref: '#/components/schemas/Flow'
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(action_id: str, parameters: Optional[list[arcor2.data.common.ActionParameter]]
        = None, flows: Optional[list[arcor2.data.common.Flow]] = None)'
    UpdateActionRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/UpdateActionRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.UpdateAction.Request.Args,
        dry_run: bool = False)'
    UpdateActionResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    UpdateActionPointJointsRequestArgs:
      type: object
      required:
      - joints_id
      - joints
      properties:
        joints_id:
          type: string
        joints:
          type: array
          items:
            $ref: '#/components/schemas/Joint'
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(joints_id: str, joints: list[arcor2.data.common.Joint])'
    UpdateActionPointJointsRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/UpdateActionPointJointsRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.UpdateActionPointJoints.Request.Args)'
    UpdateActionPointJointsResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    UpdateActionPointJointsUsingRobotRequestArgs:
      type: object
      properties:
        joints_id:
          type: string
          default: default
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(joints_id: str = ''default'')'
    UpdateActionPointJointsUsingRobotRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/UpdateActionPointJointsUsingRobotRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.UpdateActionPointJointsUsingRobot.Request.Args)'
    UpdateActionPointJointsUsingRobotResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    UpdateActionPointOrientationRequestArgs:
      type: object
      required:
      - orientation_id
      - orientation
      properties:
        orientation_id:
          type: string
        orientation:
          $ref: '#/components/schemas/Orientation'
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(orientation_id: str, orientation: arcor2.data.common.Orientation)'
    UpdateActionPointOrientationRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/UpdateActionPointOrientationRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.UpdateActionPointOrientation.Request.Args)'
    UpdateActionPointOrientationResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    UpdateActionPointOrientationUsingRobotRequestArgs:
      type: object
      required:
      - orientation_id
      - robot
      properties:
        orientation_id:
          type: string
        robot:
          $ref: '#/components/schemas/RobotArg'
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(orientation_id: str, robot: arcor2.data.rpc.common.RobotArg)'
    UpdateActionPointOrientationUsingRobotRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/UpdateActionPointOrientationUsingRobotRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.UpdateActionPointOrientationUsingRobot.Request.Args)'
    UpdateActionPointOrientationUsingRobotResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    UpdateActionPointParentRequestArgs:
      type: object
      required:
      - action_point_id
      - new_parent_id
      properties:
        action_point_id:
          type: string
        new_parent_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(action_point_id: str, new_parent_id: str)'
    UpdateActionPointParentRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/UpdateActionPointParentRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.UpdateActionPointParent.Request.Args,
        dry_run: bool = False)'
    UpdateActionPointParentResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    UpdateActionPointPositionRequestArgs:
      type: object
      required:
      - action_point_id
      - new_position
      properties:
        action_point_id:
          type: string
        new_position:
          $ref: '#/components/schemas/Position'
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(action_point_id: str, new_position: arcor2.data.common.Position)'
    UpdateActionPointPositionRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/UpdateActionPointPositionRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.UpdateActionPointPosition.Request.Args,
        dry_run: bool = False)'
    UpdateActionPointPositionResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    UpdateActionPointUsingRobotRequestArgs:
      type: object
      required:
      - action_point_id
      - robot
      properties:
        action_point_id:
          type: string
        robot:
          $ref: '#/components/schemas/RobotArg'
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(action_point_id: str, robot: arcor2.data.rpc.common.RobotArg)'
    UpdateActionPointUsingRobotRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/UpdateActionPointUsingRobotRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.UpdateActionPointUsingRobot.Request.Args)'
    UpdateActionPointUsingRobotResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    UpdateLogicItemRequestArgs:
      type: object
      required:
      - logic_item_id
      - start
      - end
      properties:
        logic_item_id:
          type: string
        start:
          type: string
        end:
          type: string
        condition:
          $ref: '#/components/schemas/ProjectLogicIf'
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(logic_item_id: str, start: str, end: str, condition: Optional[arcor2.data.common.ProjectLogicIf]
        = None)'
    UpdateLogicItemRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/UpdateLogicItemRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.UpdateLogicItem.Request.Args,
        dry_run: bool = False)'
    UpdateLogicItemResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    UpdateProjectDescriptionRequestArgs:
      type: object
      required:
      - project_id
      - new_description
      properties:
        project_id:
          type: string
        new_description:
          type: string
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(project_id: str, new_description: str)'
    UpdateProjectDescriptionRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/UpdateProjectDescriptionRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.UpdateProjectDescription.Request.Args)'
    UpdateProjectDescriptionResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    UpdateProjectHasLogicRequestArgs:
      type: object
      required:
      - project_id
      - new_has_logic
      properties:
        project_id:
          type: string
        new_has_logic:
          type: boolean
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(project_id: str, new_has_logic: bool)'
    UpdateProjectHasLogicRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/UpdateProjectHasLogicRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.UpdateProjectHasLogic.Request.Args)'
    UpdateProjectHasLogicResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    UpdateProjectParameterRequestArgs:
      type: object
      required:
      - id
      properties:
        id:
          type: string
        name:
          type: string
        value:
          type: string
      x-module-name: arcor2_arserver_data.rpc.project
      description: 'Args(id: str, name: Optional[str] = None, value: Optional[str]
        = None)'
    UpdateProjectParameterRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/UpdateProjectParameterRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.project.UpdateProjectParameter.Request.Args,
        dry_run: bool = False)'
    UpdateProjectParameterResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.project
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    CalibrateRobotRequestArgs:
      type: object
      required:
      - robot_id
      properties:
        robot_id:
          type: string
        camera_id:
          type: string
        move_to_calibration_pose:
          type: boolean
          default: true
      x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Args(robot_id: str, camera_id: Optional[str] = None, move_to_calibration_pose:
        bool = True)'
    CalibrateRobotRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/CalibrateRobotRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.robot.CalibrateRobot.Request.Args)'
    CalibrateRobotResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    ForwardKinematicsRequestArgs:
      type: object
      required:
      - robot_id
      - end_effector_id
      - joints
      properties:
        robot_id:
          type: string
        end_effector_id:
          type: string
        joints:
          type: array
          items:
            $ref: '#/components/schemas/Joint'
        arm_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Args(robot_id: str, end_effector_id: str, joints: list[arcor2.data.common.Joint],
        arm_id: Optional[str] = None)'
    ForwardKinematicsRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/ForwardKinematicsRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.robot.ForwardKinematics.Request.Args)'
    ForwardKinematicsResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/Pose'
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[arcor2.data.common.Pose] = None)'
    GetEndEffectorPoseRequestArgs:
      type: object
      required:
      - robot_id
      - end_effector_id
      properties:
        robot_id:
          type: string
        end_effector_id:
          type: string
        arm_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Args(robot_id: str, end_effector_id: str, arm_id: Optional[str]
        = None)'
    GetEndEffectorPoseRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/GetEndEffectorPoseRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.robot.GetEndEffectorPose.Request.Args)'
    GetEndEffectorPoseResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/Pose'
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[arcor2.data.common.Pose] = None)'
    GetEndEffectorsRequestArgs:
      type: object
      required:
      - robot_id
      properties:
        robot_id:
          type: string
        arm_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Args(robot_id: str, arm_id: Optional[str])'
    GetEndEffectorsRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/GetEndEffectorsRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.robot.GetEndEffectors.Request.Args)'
    GetEndEffectorsResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            type: array
            items:
              type: string
            uniqueItems: true
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[set[str]] = None)'
    GetGrippersRequestArgs:
      type: object
      required:
      - robot_id
      properties:
        robot_id:
          type: string
        arm_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Args(robot_id: str, arm_id: Optional[str] = None)'
    GetGrippersRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/GetGrippersRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.robot.GetGrippers.Request.Args)'
    GetGrippersResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            type: array
            items:
              type: string
            uniqueItems: true
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[set[str]] = None)'
    GetRobotArmsRequestArgs:
      type: object
      required:
      - robot_id
      properties:
        robot_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Args(robot_id: str)'
    GetRobotArmsRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/GetRobotArmsRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.robot.GetRobotArms.Request.Args)'
    GetRobotArmsResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            type: array
            items:
              type: string
            uniqueItems: true
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[set[str]] = None)'
    GetRobotJointsRequestArgs:
      type: object
      required:
      - robot_id
      properties:
        robot_id:
          type: string
        arm_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Args(robot_id: str, arm_id: Optional[str] = None)'
    GetRobotJointsRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/GetRobotJointsRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.robot.GetRobotJoints.Request.Args)'
    GetRobotJointsResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Joint'
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[list[arcor2.data.common.Joint]] = None)'
    GetRobotMetaRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Request(id: int)'
    RobotMeta:
      type: object
      required:
      - type
      - robot_type
      properties:
        type:
          type: string
        robot_type:
          type: string
          enum:
          - articulated
          - cartesian
          - scara
          x-enum-name: RobotType
          x-module-name: arcor2.data.robot
        multi_arm:
          type: boolean
          default: false
        features:
          $ref: '#/components/schemas/RobotFeatures'
          default:
            move_to_pose: false
            move_to_joints: false
            stop: false
            forward_kinematics: false
            inverse_kinematics: false
            hand_teaching: false
        urdf_package_filename:
          type: string
      x-module-name: arcor2_arserver_data.robot
      description: Robot meta that could be extracted without creating an instance.
    RobotFeatures:
      type: object
      properties:
        move_to_pose:
          type: boolean
          default: false
        move_to_joints:
          type: boolean
          default: false
        stop:
          type: boolean
          default: false
        forward_kinematics:
          type: boolean
          default: false
        inverse_kinematics:
          type: boolean
          default: false
        hand_teaching:
          type: boolean
          default: false
      x-module-name: arcor2_arserver_data.robot
      description: Names of the robot features must match names of the methods.
    GetRobotMetaResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/RobotMeta'
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[list[arcor2_arserver_data.robot.RobotMeta]] = None)'
    GetSuctionsRequestArgs:
      type: object
      required:
      - robot_id
      properties:
        robot_id:
          type: string
        arm_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Args(robot_id: str, arm_id: Optional[str] = None)'
    GetSuctionsRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/GetSuctionsRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.robot.GetSuctions.Request.Args)'
    GetSuctionsResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            type: array
            items:
              type: string
            uniqueItems: true
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[set[str]] = None)'
    HandTeachingModeRequestArgs:
      type: object
      required:
      - robot_id
      - enable
      properties:
        robot_id:
          type: string
        enable:
          type: boolean
        arm_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Args(robot_id: str, enable: bool, arm_id: Optional[str] = None)'
    HandTeachingModeRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/HandTeachingModeRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.robot.HandTeachingMode.Request.Args,
        dry_run: bool = False)'
    HandTeachingModeResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    InverseKinematicsRequestArgs:
      type: object
      required:
      - robot_id
      - end_effector_id
      - pose
      properties:
        robot_id:
          type: string
        end_effector_id:
          type: string
        pose:
          $ref: '#/components/schemas/Pose'
        start_joints:
          type: array
          items:
            $ref: '#/components/schemas/Joint'
        avoid_collisions:
          type: boolean
          default: true
        arm_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Args(robot_id: str, end_effector_id: str, pose: arcor2.data.common.Pose,
        start_joints: Optional[list[arcor2.data.common.Joint]] = None, avoid_collisions:
        bool = True, arm_id: Optional[str] = None)'
    InverseKinematicsRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/InverseKinematicsRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.robot.InverseKinematics.Request.Args)'
    InverseKinematicsResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Joint'
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[list[arcor2.data.common.Joint]] = None)'
    MoveToActionPointRequestArgs:
      type: object
      required:
      - robot_id
      - speed
      properties:
        robot_id:
          type: string
        speed:
          type: number
        end_effector_id:
          type: string
        orientation_id:
          type: string
        joints_id:
          type: string
        safe:
          type: boolean
          default: true
        linear:
          type: boolean
          default: false
        arm_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Args(robot_id: str, speed: float, end_effector_id: Optional[str]
        = None, orientation_id: Optional[str] = None, joints_id: Optional[str] = None,
        safe: bool = True, linear: bool = False, arm_id: Optional[str] = None)'
    MoveToActionPointRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/MoveToActionPointRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.robot.MoveToActionPoint.Request.Args)'
    MoveToActionPointResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    MoveToJointsRequestArgs:
      type: object
      required:
      - robot_id
      - speed
      - joints
      properties:
        robot_id:
          type: string
        speed:
          type: number
        joints:
          type: array
          items:
            $ref: '#/components/schemas/Joint'
        safe:
          type: boolean
          default: true
        arm_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Args(robot_id: str, speed: float, joints: list[arcor2.data.common.Joint],
        safe: bool = True, arm_id: Optional[str] = None)'
    MoveToJointsRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/MoveToJointsRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.robot.MoveToJoints.Request.Args)'
    MoveToJointsResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    MoveToPoseRequestArgs:
      type: object
      required:
      - robot_id
      - end_effector_id
      - speed
      properties:
        robot_id:
          type: string
        end_effector_id:
          type: string
        speed:
          type: number
        position:
          $ref: '#/components/schemas/Position'
        orientation:
          $ref: '#/components/schemas/Orientation'
        safe:
          type: boolean
          default: true
        linear:
          type: boolean
          default: false
        arm_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Args(robot_id: str, end_effector_id: str, speed: float, position:
        Optional[arcor2.data.common.Position], orientation: Optional[arcor2.data.common.Orientation],
        safe: bool = True, linear: bool = False, arm_id: Optional[str] = None)'
    MoveToPoseRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/MoveToPoseRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.robot.MoveToPose.Request.Args)'
    MoveToPoseResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    RegisterForRobotEventRequestArgs:
      type: object
      required:
      - robot_id
      - what
      - send
      properties:
        robot_id:
          type: string
        what:
          type: string
          enum:
          - eef_pose
          - joints
          x-enum-name: RegisterForRobotEventRequestArgsRegisterEnum
          x-module-name: arcor2_arserver_data.rpc.robot
        send:
          type: boolean
      x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Args(robot_id: str, what: arcor2_arserver_data.rpc.robot.RegisterForRobotEvent.Request.Args.RegisterEnum,
        send: bool)'
    RegisterForRobotEventRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/RegisterForRobotEventRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.robot.RegisterForRobotEvent.Request.Args)'
    RegisterForRobotEventResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            type: array
            items:
              type: string
            uniqueItems: true
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[set[str]] = None)'
    SetEefPerpendicularToWorldRequestArgs:
      type: object
      required:
      - robot_id
      - end_effector_id
      properties:
        robot_id:
          type: string
        end_effector_id:
          type: string
        safe:
          type: boolean
          default: true
        speed:
          type: number
          default: 0.25
        linear:
          type: boolean
          default: true
        arm_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Args(robot_id: str, end_effector_id: str, safe: bool = True, speed:
        float = 0.25, linear: bool = True, arm_id: Optional[str] = None)'
    SetEefPerpendicularToWorldRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/SetEefPerpendicularToWorldRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.robot.SetEefPerpendicularToWorld.Request.Args,
        dry_run: bool = False)'
    SetEefPerpendicularToWorldResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    StepRobotEefRequestArgs:
      type: object
      required:
      - robot_id
      - end_effector_id
      - axis
      - what
      - mode
      - step
      properties:
        robot_id:
          type: string
        end_effector_id:
          type: string
        axis:
          type: string
          enum:
          - x
          - y
          - z
          x-enum-name: StepRobotEefRequestArgsAxis
          x-module-name: arcor2_arserver_data.rpc.robot
        what:
          type: string
          enum:
          - position
          - orientation
          x-enum-name: StepRobotEefRequestArgsWhat
          x-module-name: arcor2_arserver_data.rpc.robot
        mode:
          type: string
          enum:
          - world
          - robot
          - user
          - relative
          x-enum-name: StepRobotEefRequestArgsMode
          x-module-name: arcor2_arserver_data.rpc.robot
        step:
          type: number
        safe:
          type: boolean
          default: true
        pose:
          $ref: '#/components/schemas/Pose'
        speed:
          type: number
          default: 0.25
        linear:
          type: boolean
          default: true
        arm_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Args(robot_id: str, end_effector_id: str, axis: arcor2_arserver_data.rpc.robot.StepRobotEef.Request.Args.Axis,
        what: arcor2_arserver_data.rpc.robot.StepRobotEef.Request.Args.What, mode:
        arcor2_arserver_data.rpc.robot.StepRobotEef.Request.Args.Mode, step: float,
        safe: bool = True, pose: Optional[arcor2.data.common.Pose] = None, speed:
        float = 0.25, linear: bool = True, arm_id: Optional[str] = None)'
    StepRobotEefRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/StepRobotEefRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.robot.StepRobotEef.Request.Args,
        dry_run: bool = False)'
    StepRobotEefResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    StopRobotRequestArgs:
      type: object
      required:
      - robot_id
      properties:
        robot_id:
          type: string
      x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Args(robot_id: str)'
    StopRobotRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/StopRobotRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.robot.StopRobot.Request.Args)'
    StopRobotResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.robot
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    ActionParamValuesRequestArgs:
      type: object
      required:
      - id
      - param_id
      properties:
        id:
          type: string
          description: Object or service id.
        param_id:
          type: string
        parent_params:
          type: array
          items:
            $ref: '#/components/schemas/IdValue'
          default: []
      x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Args(id: str, param_id: str, parent_params: list[arcor2.data.common.IdValue]
        = <factory>)'
    IdValue:
      type: object
      required:
      - id
      - value
      properties:
        id:
          type: string
        value:
          type: string
      x-module-name: arcor2.data.common
      description: 'IdValue(id: ''str'', value: ''str'')'
    ActionParamValuesRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/ActionParamValuesRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.objects.ActionParamValues.Request.Args)'
    ActionParamValuesResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            type: array
            items:
              type: string
            uniqueItems: true
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[set[str]] = None)'
    AddObjectToSceneRequestArgs:
      type: object
      required:
      - name
      - type
      properties:
        name:
          type: string
        type:
          type: string
        pose:
          $ref: '#/components/schemas/Pose'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
          default: []
      x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Args(name: str, type: str, pose: Optional[arcor2.data.common.Pose]
        = None, parameters: list[arcor2.data.common.Parameter] = <factory>)'
    AddObjectToSceneRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/AddObjectToSceneRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.scene.AddObjectToScene.Request.Args,
        dry_run: bool = False)'
    AddObjectToSceneResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    AddVirtualCollisionObjectToSceneRequestArgs:
      type: object
      required:
      - name
      - pose
      - model
      properties:
        name:
          type: string
        pose:
          $ref: '#/components/schemas/Pose'
        model:
          $ref: '#/components/schemas/ObjectModel'
      x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Args(name: str, pose: arcor2.data.common.Pose, model: arcor2.data.object_type.ObjectModel)'
    AddVirtualCollisionObjectToSceneRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/AddVirtualCollisionObjectToSceneRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.scene.AddVirtualCollisionObjectToScene.Request.Args,
        dry_run: bool = False)'
    AddVirtualCollisionObjectToSceneResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    CloseSceneRequestArgs:
      type: object
      properties:
        force:
          type: boolean
          default: false
      x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Args(force: bool = False)'
    CloseSceneRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        properties:
          args:
            $ref: '#/components/schemas/CloseSceneRequestArgs'
            default:
              force: false
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.scene.CloseScene.Request.Args
        = <factory>, dry_run: bool = False)'
    CloseSceneResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    CopySceneRequestArgs:
      type: object
      required:
      - source_id
      - target_name
      properties:
        source_id:
          type: string
        target_name:
          type: string
      x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Args(source_id: str, target_name: str)'
    CopySceneRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/CopySceneRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.scene.CopyScene.Request.Args)'
    CopySceneResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            type: string
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[str] = None)'
    DeleteSceneRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/IdArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Request(id: int, args: arcor2.data.rpc.common.IdArgs, dry_run:
        bool = False)'
    DeleteSceneResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            type: array
            items:
              type: string
            uniqueItems: true
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[set[str]] = None)'
    GetCameraPoseRequestArgs:
      type: object
      required:
      - camera_parameters
      - image
      properties:
        camera_parameters:
          $ref: '#/components/schemas/CameraParameters'
        image:
          type: string
          description: Base64 encoded image.
        inverse:
          type: boolean
          default: false
      x-module-name: arcor2_arserver_data.rpc.common
      description: 'Args(camera_parameters: arcor2.data.camera.CameraParameters, image:
        str, inverse: bool = False)'
    GetCameraPoseRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/GetCameraPoseRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.common
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.common.GetCameraPose.Request.Args)'
    EstimatedPose:
      type: object
      required:
      - pose
      - quality
      properties:
        pose:
          $ref: '#/components/schemas/Pose'
        quality:
          type: number
      x-module-name: arcor2_calibration_data
      description: 'EstimatedPose(pose: arcor2.data.common.Pose, quality: float)'
    GetCameraPoseResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/EstimatedPose'
        x-module-name: arcor2_arserver_data.rpc.common
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[arcor2_calibration_data.EstimatedPose] = None)'
    GetSceneRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/IdArgs'
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Request(id: int, args: arcor2.data.rpc.common.IdArgs)'
    GetSceneResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/Scene'
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[arcor2.data.common.Scene] = None)'
    ListScenesRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Request(id: int)'
    ListScenesResponseData:
      allOf:
      - $ref: '#/components/schemas/IdDesc'
      - type: object
        properties:
          problems:
            type: array
            items:
              type: string
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Data(id: ''str'', name: ''str'', created: ''datetime'', modified:
        ''datetime'', description: ''Optional[str]'' = None, problems: Optional[list[str]]
        = None)'
    IdDesc:
      type: object
      required:
      - id
      - name
      - created
      - modified
      properties:
        id:
          type: string
        name:
          type: string
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
        description:
          type: string
      x-module-name: arcor2.data.common
      description: 'IdDesc(id: ''str'', name: ''str'', created: ''datetime'', modified:
        ''datetime'', description: ''Optional[str]'' = None)'
    ListScenesResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/ListScenesResponseData'
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[list[arcor2_arserver_data.rpc.scene.ListScenes.Response.Data]]
        = None)'
    MarkersCornersRequestArgs:
      type: object
      required:
      - camera_parameters
      - image
      properties:
        camera_parameters:
          $ref: '#/components/schemas/CameraParameters'
        image:
          type: string
          description: Base64 encoded image.
      x-module-name: arcor2_arserver_data.rpc.common
      description: 'Args(camera_parameters: arcor2.data.camera.CameraParameters, image:
        str)'
    MarkersCornersRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/MarkersCornersRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.common
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.common.MarkersCorners.Request.Args)'
    MarkerCorners:
      type: object
      required:
      - marker_id
      - corners
      properties:
        marker_id:
          type: integer
        corners:
          type: array
          items:
            $ref: '#/components/schemas/Corner'
      x-module-name: arcor2_calibration_data
      description: 'MarkerCorners(marker_id: int, corners: list[arcor2_calibration_data.Corner])'
    Corner:
      type: object
      required:
      - x
      - y
      properties:
        x:
          type: number
        y:
          type: number
      x-module-name: arcor2_calibration_data
      description: 'Corner(x: float, y: float)'
    MarkersCornersResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/MarkerCorners'
        x-module-name: arcor2_arserver_data.rpc.common
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[list[arcor2_calibration_data.MarkerCorners]] = None)'
    NewSceneRequestArgs:
      type: object
      required:
      - name
      properties:
        name:
          type: string
        description:
          type: string
          default: ''
      x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Args(name: str, description: str = <factory>)'
    NewSceneRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/NewSceneRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.scene.NewScene.Request.Args,
        dry_run: bool = False)'
    NewSceneResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    OpenSceneRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/IdArgs'
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Request(id: int, args: arcor2.data.rpc.common.IdArgs)'
    OpenSceneResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    ProjectsWithSceneRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/IdArgs'
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Request(id: int, args: arcor2.data.rpc.common.IdArgs)'
    ProjectsWithSceneResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            type: array
            items:
              type: string
            uniqueItems: true
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[set[str]] = None)'
    RemoveFromSceneRequestArgs:
      allOf:
      - $ref: '#/components/schemas/IdArgs'
      - type: object
        properties:
          force:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Args(id: str, force: bool = False)'
    RemoveFromSceneRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/RemoveFromSceneRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.scene.RemoveFromScene.Request.Args,
        dry_run: bool = False)'
    RemoveFromSceneResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    RenameArgs:
      type: object
      required:
      - id
      - new_name
      properties:
        id:
          type: string
        new_name:
          type: string
      x-module-name: arcor2_arserver_data.rpc.scene
      description: 'RenameArgs(id: str, new_name: str)'
    RenameObjectRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/RenameArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.scene.RenameArgs,
        dry_run: bool = False)'
    RenameObjectResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    RenameSceneRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/RenameArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.scene.RenameArgs,
        dry_run: bool = False)'
    RenameSceneResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    SaveSceneRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        properties:
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Request(id: int, dry_run: bool = False)'
    SaveSceneResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    SceneObjectUsageRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/IdArgs'
            description: ID could be object or service.
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Request(id: int, args: arcor2.data.rpc.common.IdArgs)'
    SceneObjectUsageResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            type: array
            items:
              type: string
            uniqueItems: true
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: Optional[set[str]] = None)'
    StartSceneRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        properties:
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Request(id: int, dry_run: bool = False)'
    StartSceneResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    StopSceneRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        properties:
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Request(id: int, dry_run: bool = False)'
    StopSceneResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    UpdateObjectParametersRequestArgs:
      type: object
      required:
      - id
      properties:
        id:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
          default: []
      x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Args(id: str, parameters: list[arcor2.data.common.Parameter] =
        <factory>)'
    UpdateObjectParametersRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/UpdateObjectParametersRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.scene.UpdateObjectParameters.Request.Args,
        dry_run: bool = False)'
    UpdateObjectParametersResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    UpdateObjectPoseRequestArgs:
      type: object
      required:
      - object_id
      - pose
      properties:
        object_id:
          type: string
        pose:
          $ref: '#/components/schemas/Pose'
      x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Args(object_id: str, pose: arcor2.data.common.Pose)'
    UpdateObjectPoseRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/UpdateObjectPoseRequestArgs'
          dry_run:
            type: boolean
            default: false
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.scene.UpdateObjectPose.Request.Args,
        dry_run: bool = False)'
    UpdateObjectPoseResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    UpdateObjectPoseUsingRobotRequestArgs:
      allOf:
      - $ref: '#/components/schemas/IdArgs'
      - type: object
        required:
        - robot
        properties:
          robot:
            $ref: '#/components/schemas/RobotArg'
          pivot:
            type: string
            enum:
            - top
            - middle
            - bottom
            x-enum-name: UpdateObjectPoseUsingRobotRequestArgsPivotEnum
            x-module-name: arcor2_arserver_data.rpc.objects
            default: middle
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Args(id: str, robot: arcor2.data.rpc.common.RobotArg, pivot: arcor2_arserver_data.rpc.objects.UpdateObjectPoseUsingRobot.Request.Args.PivotEnum
        = <PivotEnum.MIDDLE: ''middle''>)'
    UpdateObjectPoseUsingRobotRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/UpdateObjectPoseUsingRobotRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.objects.UpdateObjectPoseUsingRobot.Request.Args)'
    UpdateObjectPoseUsingRobotResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.objects
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    UpdateSceneDescriptionRequestArgs:
      type: object
      required:
      - scene_id
      - new_description
      properties:
        scene_id:
          type: string
        new_description:
          type: string
      x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Args(scene_id: str, new_description: str)'
    UpdateSceneDescriptionRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/UpdateSceneDescriptionRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.scene.UpdateSceneDescription.Request.Args)'
    UpdateSceneDescriptionResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.scene
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    RegisterUserRequestArgs:
      type: object
      required:
      - user_name
      properties:
        user_name:
          type: string
      x-module-name: arcor2_arserver_data.rpc.user
      description: 'Args(user_name: str)'
    RegisterUserRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/RegisterUserRequestArgs'
        x-module-name: arcor2_arserver_data.rpc.user
      description: 'Request(id: int, args: arcor2_arserver_data.rpc.user.RegisterUser.Request.Args)'
    RegisterUserResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_arserver_data.rpc.user
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    RunPackageRequestArgs:
      allOf:
      - $ref: '#/components/schemas/IdArgs'
      - type: object
        properties:
          start_paused:
            type: boolean
            default: false
          breakpoints:
            type: array
            items:
              type: string
            uniqueItems: true
        x-module-name: arcor2_execution_data.rpc
      description: 'Args(id: str, start_paused: bool = False, breakpoints: Optional[set[str]]
        = None)'
    RunPackageRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/RunPackageRequestArgs'
        x-module-name: arcor2_execution_data.rpc
      description: 'Request(id: int, args: arcor2_execution_data.rpc.RunPackage.Request.Args)'
    RunPackageResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_execution_data.rpc
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    StopPackageRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        properties: {}
        x-module-name: arcor2_execution_data.rpc
      description: 'Request(id: int)'
    StopPackageResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_execution_data.rpc
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    PausePackageRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        properties: {}
        x-module-name: arcor2_execution_data.rpc
      description: 'Request(id: int)'
    PausePackageResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_execution_data.rpc
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    ResumePackageRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        properties: {}
        x-module-name: arcor2_execution_data.rpc
      description: 'Request(id: int)'
    ResumePackageResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_execution_data.rpc
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    UploadPackageRequestArgs:
      type: object
      required:
      - id
      - data
      properties:
        id:
          type: string
          description: Id of the execution package.
        data:
          type: string
          description: Base64 encoded content of the zip file.
      x-module-name: arcor2_execution_data.rpc
      description: 'Args(id: str, data: str)'
    UploadPackageRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/UploadPackageRequestArgs'
        x-module-name: arcor2_execution_data.rpc
      description: 'Request(id: int, args: arcor2_execution_data.rpc.UploadPackage.Request.Args)'
    UploadPackageResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_execution_data.rpc
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    ListPackagesRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        properties: {}
        x-module-name: arcor2_execution_data.rpc
      description: 'Request(id: int)'
    ListPackagesResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/PackageSummary'
            default: []
        x-module-name: arcor2_execution_data.rpc
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None, data: list[arcor2_execution_data.common.PackageSummary] = <factory>)'
    DeletePackageRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/IdArgs'
        x-module-name: arcor2_execution_data.rpc
      description: 'Request(id: int, args: arcor2.data.rpc.common.IdArgs)'
    DeletePackageResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_execution_data.rpc
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    RenamePackageRequestArgs:
      type: object
      required:
      - package_id
      - new_name
      properties:
        package_id:
          type: string
        new_name:
          type: string
      x-module-name: arcor2_execution_data.rpc
      description: 'Args(package_id: str, new_name: str)'
    RenamePackageRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        required:
        - args
        properties:
          args:
            $ref: '#/components/schemas/RenamePackageRequestArgs'
        x-module-name: arcor2_execution_data.rpc
      description: 'Request(id: int, args: arcor2_execution_data.rpc.RenamePackage.Request.Args)'
    RenamePackageResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_execution_data.rpc
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'
    StepActionRequest:
      allOf:
      - $ref: '#/components/schemas/Request'
      - type: object
        properties: {}
        x-module-name: arcor2_execution_data.rpc
      description: 'Request(id: int)'
    StepActionResponse:
      allOf:
      - $ref: '#/components/schemas/Response'
      - type: object
        properties: {}
        x-module-name: arcor2_execution_data.rpc
      description: 'Response(id: int = 0, result: bool = True, messages: Optional[list[str]]
        = None)'

